Creating a complex SVG animation as a background in React involves using a combination of React components, SVG elements, and CSS animations. Below is a simple example using React and CSS to create a background with randomly moving sharp shapes (box and triangle) in a wave-like style. Please note that the animation logic can be further customized based on your preferences.

```jsx
import React, { useEffect } from 'react';
import './Background.css';

const Background = () => {
  useEffect(() => {
    const generateRandomShape = () => {
      const shapes = ['box', 'triangle'];
      return shapes[Math.floor(Math.random() * shapes.length)];
    };

    const createShape = () => {
      const shape = generateRandomShape();
      const element = document.createElement('div');
      element.className = `shape ${shape}`;
      document.body.appendChild(element);

      const animationDuration = Math.random() * 5 + 3;
      element.style.animationDuration = `${animationDuration}s`;

      const animationDelay = Math.random() * 2;
      element.style.animationDelay = `-${animationDelay}s`;

      const randomPosition = Math.random() * 100;
      element.style.left = `${randomPosition}vw`;

      element.addEventListener('animationiteration', () => {
        element.remove();
        createShape();
      });
    };

    createShape();
  }, []);

  return <div className="background"></div>;
};

export default Background;
```

In this example, each shape (box or triangle) is represented by a `div` element with a specific class (`shape`). The animation is created using CSS keyframes to move the shapes randomly across the screen. The `animationiteration` event listener is used to remove the shape after each iteration and create a new one.

Now, create the corresponding CSS file (Background.css):

```css
.background {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
  z-index: -1;
}

.shape {
  position: absolute;
  width: 20px;
  height: 20px;
  background-color: #3498db;
}

.box {
  clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
}

.triangle {
  clip-path: polygon(50% 0%, 100% 100%, 0% 100%);
}

@keyframes move {
  0% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-100vh);
  }
  100% {
    transform: translateY(0);
  }
}

.shape {
  animation: move linear infinite;
}
```

In this CSS file, the `clip-path` property is used to define the box and triangle shapes. Adjust the styles and animation properties according to your preferences.

To use this `Background` component, import and include it in your main React component or wherever you want the background:

```jsx
import React from 'react';
import Background from './Background';

const App = () => {
  return (
    <div>
      <Background />
      {/* Your other components */}
    </div>
  );
};

export default App;
```

This example provides a starting point for creating a background with randomly moving sharp shapes in React using SVG-like elements. Customize the styles and animations further based on your specific design preferences.
